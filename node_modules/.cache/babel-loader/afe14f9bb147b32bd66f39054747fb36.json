{"remainingRequest":"/Users/felipas/Desktop/todo-app/node_modules/babel-loader/lib/index.js!/Users/felipas/Desktop/todo-app/src/store/modules/todos.js","dependencies":[{"path":"/Users/felipas/Desktop/todo-app/src/store/modules/todos.js","mtime":1594756592929},{"path":"/Users/felipas/Desktop/todo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/felipas/Desktop/todo-app/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9mZWxpcGFzL0Rlc2t0b3AvdG9kby1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwp2YXIgc3RhdGUgPSB7CiAgdG9kb3M6IFtdCn07CnZhciBnZXR0ZXJzID0gewogIGFsbFRvZG9zOiBmdW5jdGlvbiBhbGxUb2RvcyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnRvZG9zOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgLy8gR2V0IFRvZG8gbGlzdCBmcm9tIGpzb24gcGxhY2Vob2RlcgogIGZldGNoVG9kbzogZnVuY3Rpb24gZmV0Y2hUb2RvKF9yZWYpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zJyk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgnc2V0VG9kb3MnLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9LAogIC8vIEFkZCBuZXcgVG9kbwogIGFkZFRvZG86IGZ1bmN0aW9uIGFkZFRvZG8oX3JlZjIsIHRpdGxlKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zJywgewogICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCduZXdUb2RvJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIC8vIERlbGV0ZSBUb2RvIAogIGRlbGV0ZVRvZG86IGZ1bmN0aW9uIGRlbGV0ZVRvZG8oX3JlZjMsIGlkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIGNvbW1pdDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5kZWxldGUoImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS90b2Rvcy8iLmNvbmNhdChpZCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNvbW1pdCgncmVtb3ZlVG9kbycsIGlkKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0sCiAgdXBkYXRlVG9kbzogZnVuY3Rpb24gdXBkYXRlVG9kbyhfcmVmNCwgdXBkVG9kbykgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgIHZhciBjb21taXQsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnB1dCgiaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zLyIuY29uY2F0KHVwZFRvZG8uaWQpLCB1cGRUb2RvKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgIGNvbW1pdCgndXBkYXRlVG9kbycsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQpOwogICAgfSkpKCk7CiAgfQp9Owp2YXIgbXV0YXRpb25zID0gewogIHNldFRvZG9zOiBmdW5jdGlvbiBzZXRUb2RvcyhzdGF0ZSwgdG9kb3MpIHsKICAgIHJldHVybiBzdGF0ZS50b2RvcyA9IHRvZG9zOwogIH0sCiAgbmV3VG9kbzogZnVuY3Rpb24gbmV3VG9kbyhzdGF0ZSwgdG9kbykgewogICAgcmV0dXJuIHN0YXRlLnRvZG9zLnVuc2hpZnQodG9kbyk7CiAgfSwKICByZW1vdmVUb2RvOiBmdW5jdGlvbiByZW1vdmVUb2RvKHN0YXRlLCBpZCkgewogICAgcmV0dXJuIHN0YXRlLnRvZG9zID0gc3RhdGUudG9kb3MuZmlsdGVyKGZ1bmN0aW9uICh0b2RvKSB7CiAgICAgIHJldHVybiB0b2RvLmlkICE9PSBpZDsKICAgIH0pOwogIH0sCiAgdXBkYXRlVG9kbzogZnVuY3Rpb24gdXBkYXRlVG9kbyhzdGF0ZSwgdXBkVG9kbykgewogICAgdmFyIGluZGV4ID0gc3RhdGUudG9kb3MuZmluZEluZGV4KGZ1bmN0aW9uICh0b2RvKSB7CiAgICAgIHJldHVybiB0b2RvLmlkID09PSB1cGRUb2RvLmlkOwogICAgfSk7CgogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICBzdGF0ZS50b2Rvcy5zcGxpY2UoaW5kZXgsIDEsIHVwZFRvZG8pOwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiBzdGF0ZSwKICBnZXR0ZXJzOiBnZXR0ZXJzLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMKfTs="},{"version":3,"sources":["/Users/felipas/Desktop/todo-app/src/store/modules/todos.js"],"names":["axios","state","todos","getters","allTodos","actions","fetchTodo","commit","get","response","data","addTodo","title","post","completed","deleteTodo","id","delete","updateTodo","updTodo","put","console","log","mutations","setTodos","newTodo","todo","unshift","removeTodo","filter","index","findIndex","splice"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,IAAMC,KAAK,GAAG;AACRC,EAAAA,KAAK,EAAE;AADC,CAAd;AAGC,IAAMC,OAAO,GAAG;AACTC,EAAAA,QAAQ,EAAE,kBAACH,KAAD;AAAA,WAAWA,KAAK,CAACC,KAAjB;AAAA;AADD,CAAhB;AAGA,IAAMG,OAAO,GAAG;AAED;AAEVC,EAAAA,SAJW,2BAIW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACHP,KAAK,CAACQ,GAAN,CACrB,4CADqB,CADG;;AAAA;AACtBC,cAAAA,QADsB;AAK5BF,cAAAA,MAAM,CAAC,UAAD,EAAaE,QAAQ,CAACC,IAAtB,CAAN;;AAL4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM3B,GAVgB;AAYG;AAEdC,EAAAA,OAdW,0BAcSC,KAdT,EAcgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBL,cAAAA,MAAiB,SAAjBA,MAAiB;AAAA;AAAA,qBACNP,KAAK,CAACa,IAAN,CAAW,4CAAX,EAAyD;AAACD,gBAAAA,KAAK,EAALA,KAAD;AAAQE,gBAAAA,SAAS,EAAE;AAAnB,eAAzD,CADM;;AAAA;AACvBL,cAAAA,QADuB;AAG7BF,cAAAA,MAAM,CAAC,SAAD,EAAWE,QAAQ,CAACC,IAApB,CAAN;;AAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhC,GAlBgB;AAoBD;AACMK,EAAAA,UArBL,6BAqB4BC,EArB5B,EAqBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAdT,cAAAA,MAAc,SAAdA,MAAc;AAAA;AAAA,qBACvBP,KAAK,CAACiB,MAAN,sDAA2DD,EAA3D,EADuB;;AAAA;AAG7BT,cAAAA,MAAM,CAAC,YAAD,EAAeS,EAAf,CAAN;;AAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI9B,GAzBF;AA2BOE,EAAAA,UA3BP,6BA2B8BC,OA3B9B,EA2BuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnBZ,cAAAA,MAAmB,SAAnBA,MAAmB;AAAA;AAAA,qBACbP,KAAK,CAACoB,GAAN,sDACyBD,OAAO,CAACH,EADjC,GAErBG,OAFqB,CADa;;AAAA;AAC9BV,cAAAA,QAD8B;AAMpCY,cAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACC,IAArB;AAEAH,cAAAA,MAAM,CAAC,YAAD,EAAeE,QAAQ,CAACC,IAAxB,CAAN;;AARoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASrC;AApCF,CAAhB;AAyCE,IAAMa,SAAS,GAAE;AACZC,EAAAA,QAAQ,EAAE,kBAACvB,KAAD,EAAQC,KAAR;AAAA,WAAmBD,KAAK,CAACC,KAAN,GAAcA,KAAjC;AAAA,GADE;AAEZuB,EAAAA,OAAO,EAAE,iBAACxB,KAAD,EAAQyB,IAAR;AAAA,WAAiBzB,KAAK,CAACC,KAAN,CAAYyB,OAAZ,CAAoBD,IAApB,CAAjB;AAAA,GAFG;AAGZE,EAAAA,UAAU,EAAE,oBAAC3B,KAAD,EAAQe,EAAR;AAAA,WACff,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAY2B,MAAZ,CAAmB,UAAAH,IAAI;AAAA,aAAIA,IAAI,CAACV,EAAL,KAAYA,EAAhB;AAAA,KAAvB,CADC;AAAA,GAHA;AAKhBE,EAAAA,UAAU,EAAE,oBAACjB,KAAD,EAAQkB,OAAR,EAAoB;AAC5B,QAAMW,KAAK,GAAG7B,KAAK,CAACC,KAAN,CAAY6B,SAAZ,CAAsB,UAAAL,IAAI;AAAA,aAAIA,IAAI,CAACV,EAAL,KAAYG,OAAO,CAACH,EAAxB;AAAA,KAA1B,CAAd;;AACA,QAAIc,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB7B,MAAAA,KAAK,CAACC,KAAN,CAAY8B,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B,EAA6BX,OAA7B;AACD;AACJ;AAVe,CAAjB;AAaC,eAAe;AACXlB,EAAAA,KAAK,EAALA,KADW;AAEXE,EAAAA,OAAO,EAAPA,OAFW;AAGXoB,EAAAA,SAAS,EAATA,SAHW;AAIXlB,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import axios from 'axios';\n\n\nconst state = {\n      todos: []\n    };\n const getters = {\n        allTodos: (state) => state.todos\n    };\n const actions = {\n\n                // Get Todo list from json placehoder\n                \nasync fetchTodo({ commit }) {\nconst response =  await  axios.get(\n    'https://jsonplaceholder.typicode.com/todos'\n    );\n\ncommit('setTodos', response.data)\n},\n\n                    // Add new Todo\n\nasync addTodo({ commit }, title) {\n    const response = await axios.post('https://jsonplaceholder.typicode.com/todos', {title, completed: false });\n\n    commit('newTodo',response.data)\n},\n\n                // Delete Todo \n                async deleteTodo({ commit }, id) {\n                    await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);\n                \n                    commit('removeTodo', id);\n                  },\n\n                  async updateTodo({ commit }, updTodo) {\n                    const response = await axios.put(\n                      `https://jsonplaceholder.typicode.com/todos/${updTodo.id}`,\n                      updTodo\n                    );\n                \n                    console.log(response.data);\n                \n                    commit('updateTodo', response.data);\n                  }\n\n                 \n    };\n\n   const mutations ={\n        setTodos: (state, todos) => (state.todos = todos),\n        newTodo: (state, todo) => state.todos.unshift(todo),\n        removeTodo: (state, id) =>\n    (state.todos = state.todos.filter(todo => todo.id !== id)),\n    updateTodo: (state, updTodo) => {\n        const index = state.todos.findIndex(todo => todo.id === updTodo.id);\n        if (index !== -1) {\n          state.todos.splice(index, 1, updTodo);\n        }\n    }\n    }\n\n    export default { \n        state,\n        getters,\n        mutations,\n        actions\n    }"]}]}